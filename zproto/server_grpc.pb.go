// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: zproto/server.proto

package zproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZanderClient is the client API for Zander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZanderClient interface {
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
	StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error)
	StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error)
	RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error)
	Attach(ctx context.Context, opts ...grpc.CallOption) (Zander_AttachClient, error)
	Tail(ctx context.Context, in *TailIn, opts ...grpc.CallOption) (Zander_TailClient, error)
	Logs(ctx context.Context, in *LogsIn, opts ...grpc.CallOption) (*LogsOut, error)
	Reload(ctx context.Context, in *ReloadIn, opts ...grpc.CallOption) (*ReloadOut, error)
}

type zanderClient struct {
	cc grpc.ClientConnInterface
}

func NewZanderClient(cc grpc.ClientConnInterface) ZanderClient {
	return &zanderClient{cc}
}

func (c *zanderClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, "/zproto.Zander/ListServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zanderClient) StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error) {
	out := new(StartServerResponse)
	err := c.cc.Invoke(ctx, "/zproto.Zander/StartServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zanderClient) StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error) {
	out := new(StopServerResponse)
	err := c.cc.Invoke(ctx, "/zproto.Zander/StopServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zanderClient) RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error) {
	out := new(RestartServerResponse)
	err := c.cc.Invoke(ctx, "/zproto.Zander/RestartServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zanderClient) Attach(ctx context.Context, opts ...grpc.CallOption) (Zander_AttachClient, error) {
	stream, err := c.cc.NewStream(ctx, &Zander_ServiceDesc.Streams[0], "/zproto.Zander/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &zanderAttachClient{stream}
	return x, nil
}

type Zander_AttachClient interface {
	Send(*AttachIn) error
	Recv() (*AttachOut, error)
	grpc.ClientStream
}

type zanderAttachClient struct {
	grpc.ClientStream
}

func (x *zanderAttachClient) Send(m *AttachIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *zanderAttachClient) Recv() (*AttachOut, error) {
	m := new(AttachOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zanderClient) Tail(ctx context.Context, in *TailIn, opts ...grpc.CallOption) (Zander_TailClient, error) {
	stream, err := c.cc.NewStream(ctx, &Zander_ServiceDesc.Streams[1], "/zproto.Zander/Tail", opts...)
	if err != nil {
		return nil, err
	}
	x := &zanderTailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Zander_TailClient interface {
	Recv() (*TailOut, error)
	grpc.ClientStream
}

type zanderTailClient struct {
	grpc.ClientStream
}

func (x *zanderTailClient) Recv() (*TailOut, error) {
	m := new(TailOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *zanderClient) Logs(ctx context.Context, in *LogsIn, opts ...grpc.CallOption) (*LogsOut, error) {
	out := new(LogsOut)
	err := c.cc.Invoke(ctx, "/zproto.Zander/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zanderClient) Reload(ctx context.Context, in *ReloadIn, opts ...grpc.CallOption) (*ReloadOut, error) {
	out := new(ReloadOut)
	err := c.cc.Invoke(ctx, "/zproto.Zander/Reload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZanderServer is the server API for Zander service.
// All implementations must embed UnimplementedZanderServer
// for forward compatibility
type ZanderServer interface {
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error)
	StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error)
	RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error)
	Attach(Zander_AttachServer) error
	Tail(*TailIn, Zander_TailServer) error
	Logs(context.Context, *LogsIn) (*LogsOut, error)
	Reload(context.Context, *ReloadIn) (*ReloadOut, error)
	mustEmbedUnimplementedZanderServer()
}

// UnimplementedZanderServer must be embedded to have forward compatible implementations.
type UnimplementedZanderServer struct {
}

func (UnimplementedZanderServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedZanderServer) StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (UnimplementedZanderServer) StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (UnimplementedZanderServer) RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartServer not implemented")
}
func (UnimplementedZanderServer) Attach(Zander_AttachServer) error {
	return status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (UnimplementedZanderServer) Tail(*TailIn, Zander_TailServer) error {
	return status.Errorf(codes.Unimplemented, "method Tail not implemented")
}
func (UnimplementedZanderServer) Logs(context.Context, *LogsIn) (*LogsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedZanderServer) Reload(context.Context, *ReloadIn) (*ReloadOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedZanderServer) mustEmbedUnimplementedZanderServer() {}

// UnsafeZanderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZanderServer will
// result in compilation errors.
type UnsafeZanderServer interface {
	mustEmbedUnimplementedZanderServer()
}

func RegisterZanderServer(s grpc.ServiceRegistrar, srv ZanderServer) {
	s.RegisterService(&Zander_ServiceDesc, srv)
}

func _Zander_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZanderServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.Zander/ListServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZanderServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zander_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZanderServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.Zander/StartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZanderServer).StartServer(ctx, req.(*StartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zander_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZanderServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.Zander/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZanderServer).StopServer(ctx, req.(*StopServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zander_RestartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZanderServer).RestartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.Zander/RestartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZanderServer).RestartServer(ctx, req.(*RestartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zander_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZanderServer).Attach(&zanderAttachServer{stream})
}

type Zander_AttachServer interface {
	Send(*AttachOut) error
	Recv() (*AttachIn, error)
	grpc.ServerStream
}

type zanderAttachServer struct {
	grpc.ServerStream
}

func (x *zanderAttachServer) Send(m *AttachOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *zanderAttachServer) Recv() (*AttachIn, error) {
	m := new(AttachIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Zander_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailIn)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ZanderServer).Tail(m, &zanderTailServer{stream})
}

type Zander_TailServer interface {
	Send(*TailOut) error
	grpc.ServerStream
}

type zanderTailServer struct {
	grpc.ServerStream
}

func (x *zanderTailServer) Send(m *TailOut) error {
	return x.ServerStream.SendMsg(m)
}

func _Zander_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZanderServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.Zander/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZanderServer).Logs(ctx, req.(*LogsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zander_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZanderServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.Zander/Reload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZanderServer).Reload(ctx, req.(*ReloadIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Zander_ServiceDesc is the grpc.ServiceDesc for Zander service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zander_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zproto.Zander",
	HandlerType: (*ZanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServers",
			Handler:    _Zander_ListServers_Handler,
		},
		{
			MethodName: "StartServer",
			Handler:    _Zander_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _Zander_StopServer_Handler,
		},
		{
			MethodName: "RestartServer",
			Handler:    _Zander_RestartServer_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _Zander_Logs_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _Zander_Reload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attach",
			Handler:       _Zander_Attach_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Tail",
			Handler:       _Zander_Tail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "zproto/server.proto",
}
